%Module(name=lima@NAME@)

// Note: NumPy C-API is used by Lima binding. The header files
// defining the NumPy C-API are only intepreted the first time they
// are included in the compilation unit. In particular, the header
// "npy_3kcompat.h" also includes the C-API. The macros NO_IMPORT[_ARRAY]
// and PY_ARRAY_UNIQUE_SYMBOL modify the behaviour of the header files
// and must be defined before those files are interpreted. The C-API
// can be imported only once per each module. 
//
// SIP can be configured to create one or multiple compilation units,
// either one per mapped type plus one for the Python module, or an
// arbitrary number, for parallelisation. In order to have deterministic
// behaviour, all the compilation units generated by SIP define
// NO_IMPORT_ARRAY and, if Python 3, include the "npy_3kcompat.h" header.
// NumPy C-API is imported and initialised by "lima@NAME@_import_array"
// in a separate "lima@NAME@_init_numpy.cpp" file, called from the
// "lima@NAME@" module (post)initisation

%ModuleHeaderCode
#define NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION
#define NO_IMPORT_ARRAY
#define PY_ARRAY_UNIQUE_SYMBOL _Lima@NAME@NumPy
#include "numpy/arrayobject.h"
#if (defined(NPY_API_VERSION) && NPY_API_VERSION >= 0x00000004 && PY_VERSION_HEX >= 0x03000000)
#include "numpy/npy_3kcompat.h"
#endif

extern "C" {
#if PY_VERSION_HEX >= 0x03000000
int lima@NAME@_import_array();
#else
void lima@NAME@_import_array();
#endif
}
%End


%UnitCode
#ifndef LIMA_REPR_CODE
#define LIMA_REPR_CODE \
	std::ostringstream str; \
	str << *sipCpp;	\
	const std::string& tmpString = str.str(); \
	sipRes = PyString_FromString(tmpString.c_str());
#endif
%End

%PostInitialisationCode
lima@NAME@_import_array();
%End

@IMPORTS@

@INCLUDES@

%ModuleHeaderCode
#include "lima/Exceptions.h"
static inline void LimaExceptionTest()
{
	throw LIMA_HW_EXC(lima::Error, "Test exception");
}
%End

void LimaExceptionTest() throw (Exception);
