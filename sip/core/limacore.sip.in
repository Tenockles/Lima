//###########################################################################
// This file is part of LImA, a Library for Image Acquisition
//
// Copyright (C) : 2009-2011
// European Synchrotron Radiation Facility
// BP 220, Grenoble 38043
// FRANCE
//
// This is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 3 of the License, or
// (at your option) any later version.
//
// This software is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, see <http://www.gnu.org/licenses/>.
//###########################################################################
%Module(name=limacore,version=0)

%Platforms {WIN32_PLATFORM WIN64_PLATFORM POSIX_PLATFORM}

%Feature WITH_CONFIG
%Feature WITH_SPS_IMAGE

%ModuleHeaderCode
#include "lima/SoftOpId.h"
%End

// Creates the mapping for std::string
// From: http://www.riverbankcomputing.com/pipermail/pyqt/2009-July/023533.html

%MappedType std::string
{
%TypeHeaderCode
#include <string>
%End

%ConvertFromTypeCode
    // convert an std::string to a Python (unicode) string
    PyObject* newstring;
    newstring = PyUnicode_DecodeUTF8(sipCpp->c_str(), sipCpp->length(), NULL);
    if(newstring == NULL) {
        PyErr_Clear();
        newstring = PyString_FromString(sipCpp->c_str());
    }
    return newstring;
%End

%ConvertToTypeCode
    // Allow a Python string (or a unicode string) whenever a string is
    // expected.
    // If argument is a Unicode string, just decode it to UTF-8
    // If argument is a Python string, assume it's UTF-8
    if (sipIsErr == NULL)
        return (PyString_Check(sipPy) || PyUnicode_Check(sipPy));
    if (sipPy == Py_None) {
        *sipCppPtr = new std::string;
        return 1;
    }
    if (PyUnicode_Check(sipPy)) {
        PyObject* s = PyUnicode_AsEncodedString(sipPy, "UTF-8", "");
        *sipCppPtr = new std::string(PyString_AS_STRING(s));
        Py_DECREF(s);
        return 1;
    }
    if (PyString_Check(sipPy)) {
        *sipCppPtr = new std::string(PyString_AS_STRING(sipPy));
        return 1;
    }
    return 0;
%End
};

%MappedType std::vector<std::string>
{
%TypeHeaderCode
#include <string>
#include <vector>
%End

%ConvertToTypeCode
// Allow a Python string list (or a unicode string list ) whenever a string is
// expected.
// If argument is a Unicode string, just decode it to UTF-8
// If argument is a Python string, assume it's UTF-8
// Suppose a mixed of unicode and string is possible !!
if (sipIsErr == NULL)
{
  bool aReturnFlag = PyList_Check(sipPy);
  for(int i = 0;aReturnFlag && i < PyList_Size(sipPy);++i)
	  aReturnFlag = (PyString_Check(PyList_GET_ITEM(sipPy,i)) || PyUnicode_Check(PyList_GET_ITEM(sipPy,i)));
  return aReturnFlag;
}

*sipCppPtr = new std::vector<std::string>(PyList_Size(sipPy));
for(int i = 0;i < PyList_Size(sipPy);++i)
{
  PyObject *aPyObj = PyList_GET_ITEM(sipPy, i);
  if (aPyObj == Py_None) {
    continue;
  }
  if (PyUnicode_Check(aPyObj)) {
    PyObject* s = PyUnicode_AsEncodedString(aPyObj, "UTF-8", "");
    (*sipCppPtr)->operator[](i) = PyString_AS_STRING(s);
    Py_DECREF(s);
    continue;
  }
  if (PyString_Check(aPyObj)) {
    (*sipCppPtr)->operator[](i) = PyString_AS_STRING(aPyObj);
  }
}
return sipGetState(sipTransferObj);
%End

%ConvertFromTypeCode
// convert an std::vector<std::string> to a Python (unicode) string list
PyObject* aReturnListPt = PyList_New(sipCpp->size());
std::vector<std::string>::iterator vIter = sipCpp->begin();

for(int i = 0;vIter != sipCpp->end();++vIter,++i) {
  PyObject * newstring;
  newstring = PyUnicode_DecodeUTF8(vIter->c_str(), vIter->length(), NULL);
  if(newstring == NULL) {
    PyErr_Clear();
    newstring = PyString_FromString(vIter->c_str());
  }
  PyList_SET_ITEM(aReturnListPt,i,newstring);
}

return aReturnListPt;
%End

};

%MappedType std::vector<int>
{
%TypeHeaderCode
#include <vector>
%End

%ConvertToTypeCode
if (sipIsErr == NULL)
{
bool aReturnFlag = PyList_Check(sipPy);
for(int i = 0;aReturnFlag && i < PyList_Size(sipPy);++i)
	aReturnFlag = PyInt_Check(PyList_GET_ITEM(sipPy,i));
return aReturnFlag;
}

*sipCppPtr = new std::vector<int>(PyList_Size(sipPy));
for(int i = 0;i < PyList_Size(sipPy);++i)
  (*sipCppPtr)->operator[](i) = PyInt_AS_LONG(PyList_GET_ITEM(sipPy,i));

    return sipGetState(sipTransferObj);
%End

%ConvertFromTypeCode
PyObject* aReturnListPt = PyList_New(sipCpp->size());
std::vector<int>::iterator vIter = sipCpp->begin();

for(int i = 0;vIter != sipCpp->end();++vIter,++i)
  PyList_SET_ITEM(aReturnListPt,i,PyInt_FromLong(*vIter));

return aReturnListPt;
%End

};

%MappedType std::vector<long>
{
%TypeHeaderCode
#include <vector>
%End

%ConvertToTypeCode
if (sipIsErr == NULL)
{
bool aReturnFlag = PyList_Check(sipPy);
for(int i = 0;aReturnFlag && i < PyList_Size(sipPy);++i)
        aReturnFlag = PyInt_Check(PyList_GET_ITEM(sipPy,i));
return aReturnFlag;
}

*sipCppPtr = new std::vector<long>(PyList_Size(sipPy));
for(int i = 0;i < PyList_Size(sipPy);++i)
  (*sipCppPtr)->operator[](i) = PyInt_AS_LONG(PyList_GET_ITEM(sipPy,i));

    return sipGetState(sipTransferObj);
%End

%ConvertFromTypeCode
PyObject* aReturnListPt = PyList_New(sipCpp->size());
std::vector<long>::iterator vIter = sipCpp->begin();

for(int i = 0;vIter != sipCpp->end();++vIter,++i)
  PyList_SET_ITEM(aReturnListPt,i,PyInt_FromLong(*vIter));

return aReturnListPt;
%End

};

%MappedType std::vector<double>
{
%TypeHeaderCode
#include <vector>
%End

%ConvertToTypeCode
if (sipIsErr == NULL)
{
bool aReturnFlag = PyList_Check(sipPy);
for(int i = 0;aReturnFlag && i < PyList_Size(sipPy);++i)
        aReturnFlag = PyFloat_Check(PyList_GET_ITEM(sipPy,i));
return aReturnFlag;
}

*sipCppPtr = new std::vector<double>(PyList_Size(sipPy));
for(int i = 0;i < PyList_Size(sipPy);++i)
  (*sipCppPtr)->operator[](i) = PyFloat_AS_DOUBLE(PyList_GET_ITEM(sipPy,i));

    return sipGetState(sipTransferObj);
%End

%ConvertFromTypeCode
PyObject* aReturnListPt = PyList_New(sipCpp->size());
std::vector<double>::iterator vIter = sipCpp->begin();

for(int i = 0;vIter != sipCpp->end();++vIter,++i)
  PyList_SET_ITEM(aReturnListPt,i,PyFloat_FromDouble(*vIter));

return aReturnListPt;
%End

};

%MappedType std::vector<float>
{
%TypeHeaderCode
#include <vector>
%End

%ConvertToTypeCode
if (sipIsErr == NULL)
{
bool aReturnFlag = PyList_Check(sipPy);
for(int i = 0;aReturnFlag && i < PyList_Size(sipPy);++i)
        aReturnFlag = PyFloat_Check(PyList_GET_ITEM(sipPy,i));
return aReturnFlag;
}

*sipCppPtr = new std::vector<float>(PyList_Size(sipPy));
for(int i = 0;i < PyList_Size(sipPy);++i)
  (*sipCppPtr)->operator[](i) = PyFloat_AS_DOUBLE(PyList_GET_ITEM(sipPy,i));

    return sipGetState(sipTransferObj);
%End

%ConvertFromTypeCode
PyObject* aReturnListPt = PyList_New(sipCpp->size());
std::vector<float>::iterator vIter = sipCpp->begin();

for(int i = 0;vIter != sipCpp->end();++vIter,++i)
  PyList_SET_ITEM(aReturnListPt,i,PyFloat_FromDouble(*vIter));

return aReturnListPt;
%End

};

%MappedType std::list<double>
{
%TypeHeaderCode
#include <list>
%End

%ConvertToTypeCode
if(sipIsErr == NULL)
{
bool aReturnFlag = PyList_Check(sipPy);
for(int i = 0;aReturnFlag && i < PyList_Size(sipPy);++i)
	aReturnFlag = PyFloat_Check(PyList_GET_ITEM(sipPy,i));
return aReturnFlag;
}

*sipCppPtr = new std::list<double>();
for(int i = 0;i < PyList_Size(sipPy);++i)
	(*sipCppPtr)->push_back(PyFloat_AS_DOUBLE(PyList_GET_ITEM(sipPy,i)));
return sipGetState(sipTransferObj);
%End

%ConvertFromTypeCode
PyObject* aReturnListPt = PyList_New(sipCpp->size());
std::list<double>::iterator lIter = sipCpp->begin();

for(int i = 0;lIter != sipCpp->end();++lIter,++i)
   PyList_SET_ITEM(aReturnListPt,i,PyFloat_FromDouble(*lIter));
return aReturnListPt;
%End
};

%MappedType std::list<int>
{
%TypeHeaderCode
#include <list>
%End

%ConvertToTypeCode
if(sipIsErr == NULL)
{
bool aReturnFlag = PyList_Check(sipPy);
for(int i = 0;aReturnFlag && i < PyList_Size(sipPy);++i)
	aReturnFlag = PyInt_Check(PyList_GET_ITEM(sipPy,i));
return aReturnFlag;
}

*sipCppPtr = new std::list<int>();
for(int i = 0;i < PyList_Size(sipPy);++i)
	(*sipCppPtr)->push_back(PyInt_AS_LONG(PyList_GET_ITEM(sipPy,i)));
return sipGetState(sipTransferObj);
%End

%ConvertFromTypeCode
PyObject* aReturnListPt = PyList_New(sipCpp->size());
std::list<int>::iterator lIter = sipCpp->begin();

for(int i = 0;lIter != sipCpp->end();++lIter,++i)
   PyList_SET_ITEM(aReturnListPt,i,PyInt_FromLong(*lIter));
return aReturnListPt;
%End
};

%MappedType std::map<int,std::string>
{
%TypeHeaderCode
#include <map>
#include <string>
%End

%ConvertToTypeCode
PyObject *key, *value;
SIP_SSIZE_T pos;

if(sipIsErr == NULL)
{
  bool aReturnFlag = PyDict_Check(sipPy);

  pos = 0;
  while(aReturnFlag && PyDict_Next(sipPy, &pos, &key, &value))
     aReturnFlag = PyInt_Check(key) && (PyString_Check(value) || PyUnicode_Check(value));

  return aReturnFlag;
}

*sipCppPtr = new std::map<int,std::string>();
pos = 0;
while(PyDict_Next(sipPy, &pos, &key, &value))
{
  int anIndex = PyInt_AS_LONG(key);
  char *s;
  if(PyUnicode_Check(value)) {
    PyObject* aPyObj = PyUnicode_AsEncodedString(value, "UTF-8", "");
    s = PyString_AS_STRING(aPyObj);
    Py_DECREF(aPyObj);
  }
  else {
    s = PyString_AS_STRING(value);
  }
  std::pair<int,std::string> item(anIndex,s);
  (*sipCppPtr)->insert(item);
}
return sipGetState(sipTransferObj);
%End

%ConvertFromTypeCode
PyObject* aReturnDictPt = PyDict_New();

std::map<int,std::string>::iterator mIter, mEnd = sipCpp->end();
for(mIter = sipCpp->begin(); mIter != mEnd; ++mIter)
   {
    PyObject *aKeyPt = PyInt_FromLong(mIter->first);
    std::string *sPt = &mIter->second;
    PyObject *aValuePt = PyUnicode_DecodeUTF8(sPt->data(), sPt->length(), NULL);
    if(aValuePt == NULL) {
      PyErr_Clear();
      PyObject *aValuePt = PyString_FromStringAndSize(sPt->data(),sPt->length());
    }
    PyDict_SetItem(aReturnDictPt,aKeyPt,aValuePt);
    Py_DECREF(aKeyPt);Py_DECREF(aValuePt);
   }
return aReturnDictPt;
%End
};

%MappedType std::map<int,std::list<std::string>>
{
%TypeHeaderCode
#include <map>
#include <list>
#include <string>
%End

%ConvertToTypeCode
PyObject *key, *value;
SIP_SSIZE_T pos;

if(sipIsErr == NULL)
{
  bool aReturnFlag = PyDict_Check(sipPy);

  pos = 0;
  while(aReturnFlag && PyDict_Next(sipPy, &pos, &key, &value))
   {
     aReturnFlag = PyInt_Check(key) && PyList_Check(value);
     for(int i = 0;aReturnFlag && i < PyList_Size(value);++i)
	aReturnFlag = PyString_Check(PyList_GET_ITEM(value,i)) || PyUnicode_Check(PyList_GET_ITEM(value,i));
   }
  return aReturnFlag;
}

*sipCppPtr = new std::map<int,std::list<std::string> >();
pos = 0;
while(PyDict_Next(sipPy, &pos, &key, &value))
{
  int anIndex = PyInt_AS_LONG(key);
  std::pair<std::map<int,std::list<std::string> >::iterator, bool> aResult =
  (*sipCppPtr)->insert(std::pair<int,std::list<std::string> >(anIndex,std::list<std::string>()));

  for(int i = 0;i < PyList_Size(value);++i)
  {
    PyObject *aPyObj = PyList_GET_ITEM(value, i);
    if (aPyObj == Py_None) {
      continue;
    }
    if (PyUnicode_Check(aPyObj)) {
      PyObject* s = PyUnicode_AsEncodedString(aPyObj, "UTF-8", "");
      aResult.first->second.push_back(PyString_AS_STRING(s));
      Py_DECREF(s);
      continue;
    }
    if (PyString_Check(aPyObj)) {
      aResult.first->second.push_back(PyString_AS_STRING(aPyObj));
    }
  }
}
return sipGetState(sipTransferObj);
%End

%ConvertFromTypeCode
PyObject* aReturnDictPt = PyDict_New();


for(std::map<int,std::list<std::string> >::iterator mIter = sipCpp->begin();
    mIter != sipCpp->end();++mIter)
   {
    PyObject *aKeyPt = PyInt_FromLong(mIter->first);
    PyObject *aValuePt = PyList_New(mIter->second.size());
    PyDict_SetItem(aReturnDictPt,aKeyPt,aValuePt);
    Py_DECREF(aKeyPt);Py_DECREF(aValuePt);
    std::list<std::string>::iterator sPt = mIter->second.begin();
    for(int i = 0;sPt != mIter->second.end();++i,++sPt) {
      PyObject * newstring;
      newstring = PyUnicode_DecodeUTF8(sPt->data(), sPt->length(), NULL);
      if (newstring == NULL) {
        PyErr_Clear();
	newstring = PyString_FromStringAndSize(sPt->data(),sPt->length());
      }
      PyList_SET_ITEM(aValuePt,i,newstring);
    }
   }
return aReturnDictPt;
%End
};

%MappedType std::list<std::string>
{
%TypeHeaderCode
#include <list>
#include <string>
%End

%ConvertToTypeCode
if(sipIsErr == NULL)
{
bool aReturnFlag = PyList_Check(sipPy);
for(int i = 0;aReturnFlag && i < PyList_Size(sipPy);++i)
  aReturnFlag = (PyString_Check(PyList_GET_ITEM(sipPy,i))  || PyUnicode_Check(PyList_GET_ITEM(sipPy,i))) ;
return aReturnFlag;
}

*sipCppPtr = new std::list<std::string>();
for(int i = 0;i < PyList_Size(sipPy);++i)
{
  PyObject *aPyObj = PyList_GET_ITEM(sipPy, i);
  if (aPyObj == Py_None) {
    continue;
  }
  if (PyUnicode_Check(aPyObj)) {
    PyObject* s = PyUnicode_AsEncodedString(aPyObj, "UTF-8", "");
    (*sipCppPtr)->push_back(PyString_AS_STRING(s));
    Py_DECREF(s);
    continue;
  }
  if (PyString_Check(aPyObj)) {
    (*sipCppPtr)->push_back(PyString_AS_STRING(aPyObj));
  }
}
return sipGetState(sipTransferObj);
%End

%ConvertFromTypeCode
PyObject* aReturnListPt = PyList_New(sipCpp->size());
std::list<std::string>::iterator vIter = sipCpp->begin();

for(int i = 0;vIter != sipCpp->end();++vIter,++i) {
    PyObject * newstring;
    newstring = PyUnicode_DecodeUTF8(vIter->c_str(), vIter->length(), NULL);
    if(newstring == NULL) {
      PyErr_Clear();
      newstring = PyString_FromString(vIter->c_str());
    }
    PyList_SET_ITEM(aReturnListPt,i,newstring);
}
return aReturnListPt;
%End

};

%MappedType std::list<const char*>
{
%TypeHeaderCode
#include <list>
%End

%ConvertToTypeCode
if(sipIsErr == NULL)
{
bool aReturnFlag = PyList_Check(sipPy);
for(int i = 0;aReturnFlag && i < PyList_Size(sipPy);++i)
  aReturnFlag = (PyString_Check(PyList_GET_ITEM(sipPy,i))  || PyUnicode_Check(PyList_GET_ITEM(sipPy,i))) ;
return aReturnFlag;
}

*sipCppPtr = new std::list<const char*>();
for(int i = 0;i < PyList_Size(sipPy);++i)
{
  PyObject *aPyObj = PyList_GET_ITEM(sipPy, i);
  if (aPyObj == Py_None) {
    continue;
  }
  if (PyUnicode_Check(aPyObj)) {
    PyObject* s = PyUnicode_AsEncodedString(aPyObj, "UTF-8", "");
    (*sipCppPtr)->push_back(PyString_AS_STRING(s));
    Py_DECREF(s);
    continue;
  }
  if (PyString_Check(aPyObj)) {
    (*sipCppPtr)->push_back(PyString_AS_STRING(aPyObj));
  }
}
return sipGetState(sipTransferObj);
%End

%ConvertFromTypeCode
PyObject* aReturnListPt = PyList_New(sipCpp->size());
std::list<const char*>::iterator vIter = sipCpp->begin();

for(int i = 0;vIter != sipCpp->end();++vIter,++i) {
    PyObject * newstring;
    newstring = PyUnicode_DecodeUTF8(*vIter, strlen(*vIter), NULL);
    if(newstring == NULL) {
      PyErr_Clear();
      newstring = PyString_FromString(*vIter);
    }
    PyList_SET_ITEM(aReturnListPt,i,newstring);
}
return aReturnListPt;
%End

};

%MappedType std::list<std::list<long long>>
{
%TypeHeaderCode
#include <list>
%End

%ConvertToTypeCode
if(sipIsErr == NULL)
{
  bool aReturnFlag = PyList_Check(sipPy);
  for(int i = 0;aReturnFlag && i < PyList_Size(sipPy);++i)
  {
    PyObject *listPt = PyList_GET_ITEM(sipPy,i);
    aReturnFlag = PyList_Check(listPt);
    for(int j = 0;aReturnFlag && j < PyList_Size(listPt);++j)
      aReturnFlag = PyInt_Check(PyList_GET_ITEM(listPt,j));
  }
  return aReturnFlag;
}


*sipCppPtr = new std::list<std::list<long long> >();
for(int i = 0;i < PyList_Size(sipPy);++i)
{
  PyObject *listPt = PyList_GET_ITEM(sipPy,i);
  (*sipCppPtr)->push_back(std::list<long long>());
  std::list<long long> &aList = (*sipCppPtr)->back();
  for(int j = 0;j <  PyList_Size(listPt);++j)
    aList.push_back(PyInt_AS_LONG(PyList_GET_ITEM(listPt,j)));
}

return sipGetState(sipTransferObj);
%End

%ConvertFromTypeCode
PyObject* aReturnListPt = PyList_New(sipCpp->size());
std::list<std::list<long long> >::iterator vIter = sipCpp->begin();

for(int i = 0;vIter != sipCpp->end();++vIter,++i)
{
   std::list<long long> &aList = *vIter;
   PyObject* aListPyPt = PyList_New(aList.size());
   PyList_SET_ITEM(aReturnListPt,i,aListPyPt);
   std::list<long long>::iterator sIter = aList.begin();
   for(int j = 0;sIter != aList.end();++sIter,++j)
     PyList_SET_ITEM(aListPyPt,j,PyInt_FromLong(*sIter));
}
return aReturnListPt;
%End
};

%ModuleHeaderCode
#define NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION
#include "numpy/numpyconfig.h"
#if (defined(NPY_API_VERSION) && NPY_API_VERSION >= 0x00000004 && PY_VERSION_HEX >= 0x03000000)
#include "numpy/npy_3kcompat.h"
#endif

extern "C"
{
#if PY_VERSION_HEX >= 0x03000000
int lima_import_array();
#else
void lima_import_array();
#endif
}
%End

%UnitCode
#include <lima_repr_attr.cpp>
%End

%ModuleCode
#define PY_ARRAY_UNIQUE_SYMBOL _limaNumpyArray
#include "numpy/arrayobject.h"
#include <iostream>
using namespace std;
extern "C"
{
#if PY_VERSION_HEX >= 0x03000000
  int lima_import_array()
  {
    import_array();
    return 0;
  }
#else
  void lima_import_array()
  {
    import_array();
  }
#endif
}
%End

%PostInitialisationCode
lima_import_array();
%End

%Import processlib.sip

@INCLUDES@
%Include HwFrameInfo.sip
